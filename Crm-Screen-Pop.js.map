{"version":3,"sources":["Crm-Screen-Pop.js"],"names":["window","angular","undefined","widgetComponent","WidgetAPI","scope","replace","template","link","element","params","api","Interactiondata","getInteractionData","console","log","EmailId","type","crmurl","xhr1","XMLHttpRequest","open","send","onreadystatechange","this","readyState","status","responseText","setTimeout","xhr2","alert","on","unregister","$inject","module","directive"],"mappings":"AAAA,cAEA,SAAWA,EAAQC,EAASC,GAY1B,SAASC,EAAgBC,GAoDvB,MAAO,CACLC,MAAO,GACPC,SAAS,EACTC,SAlEW,2pBAmEXC,KAvDF,SAAyBH,EAAOI,EAASC,GAEvC,IAAIC,EAAM,IAAIP,EAAUM,GAQxB,GAPAL,EAAMO,gBAAkBD,EAAIE,qBAC5BC,QAAQC,IAAI,0BAA2BV,EAAMO,iBAC7CP,EAAMW,QAAUX,EAAMO,gBAAoC,mBAC1DE,QAAQC,IAAI,6CAA2CV,EAAMW,SAC7DX,EAAMY,KAAOZ,EAAMO,gBAAyB,QAC5CE,QAAQC,IAAI,wBAAsBV,EAAMY,MAEtB,WAAdZ,EAAMY,KAAmB,CAC3BH,QAAQC,IAAI,oCACZV,EAAMa,OAASb,EAAMW,QACrBF,QAAQC,IAAI,uCAAqCV,EAAMa,QACvD,IAAIC,EAAO,IAAIC,eAEfD,EAAKE,KAAK,MAAOhB,EAAMa,QAAQ,GAC/BC,EAAKG,OAELH,EAAKI,mBAAqB,WACD,GAAnBC,KAAKC,YAAkC,KAAfD,KAAKE,SAC/BZ,QAAQC,IAAI,2CAAyCS,KAAKG,cAC1DC,WAAW5B,EAAOqB,KAAKG,KAAKG,cAAe,YAG1C,GAAkB,SAAdtB,EAAMY,KAAiB,CAChCH,QAAQC,IAAI,iCACZV,EAAMa,OAASb,EAAMW,QACrBF,QAAQC,IAAI,uCAAqCV,EAAMa,QACvD,IAAIW,EAAO,IAAIT,eAEfS,EAAKR,KAAK,MAAOhB,EAAMa,QAAQ,GAC/BW,EAAKP,OAELO,EAAKN,mBAAqB,WACD,GAAnBC,KAAKC,YAAkC,KAAfD,KAAKE,SAC/BZ,QAAQC,IAAI,2CAAyCS,KAAKG,cAC1DC,WAAW5B,EAAOqB,KAAKG,KAAKG,cAAe,YAI/Cb,QAAQC,IAAI,6BACZe,MAAM,qDAIRrB,EAAQsB,GAAG,WAAY,WACrBpB,EAAIqB,iBAnDV7B,EAAgB8B,QAAU,CAAC,aAC3BhC,EAAQiC,OAAO,uCAAwC,CAAC,4BAA4BC,UAAU,gBAAiBhC,GAVjH,CAuEGH,OAAQA,OAAOC","file":"Crm-Screen-Pop.js","sourcesContent":["\"use strict\";\n\n(function (window, angular, undefined) {\n  var template = \"<div id=\\\"27b07be6-af60-42e4-86f9-d01d38332970\\\" class=\\\"neo-widget widget--Crm-Screen-Pop\\\">\\n\\n\\n\\n  <div class=\\\"neo-widget__header aoc-home\\\">Crm Screen Pop</div>\\n\\n\\n\\n  <div class=\\\"neo-widget__content neo-widget__content--indented\\\">\\n\\n    <div class=\\\"row\\\">\\n\\n      <div class=\\\"col-medium-12 col-large-12\\\">\\n\\n        <p>Add widget content here</p>\\n\\n        <span class=\\\"specific-style-text\\\">\\n\\n          This is an example of specific widget only styling.\\n\\n          This ensures that the style is only applied to this widget and does not impact any other widget within Workspaces.\\n\\n        </span>\\n\\n      </div>\\n\\n    </div>\\n\\n  </div>\\n\\n\\n\\n</div>\";\n\n  function urls(scope) {\n    console.log(INFO, \"Load Crm Config --> Start\");\n    scope.crmurl = \"https://10.9.137.74/IvrService/IvrData/CrmData/GetUrl?MobileNumber=\";\n    console.log(DEBUG, \"Middleware Url Endpoint --> \", scope.crmurl);\n  }\n\n  widgetComponent.$inject = [\"WidgetAPI\"];\n  angular.module('4a7ab075-9fbd-4aed-864c-5340ba000e76', ['core.services.WidgetAPI']).directive('crmScreenPop1', widgetComponent);\n\n  function widgetComponent(WidgetAPI) {\n    function widgetContainer(scope, element, params) {\n      // Create a new instance of the Widget API\n      var api = new WidgetAPI(params);\n      scope.Interactiondata = api.getInteractionData();\n      console.log(\"iNterAction data -====>\", scope.Interactiondata);\n      scope.EmailId = scope.Interactiondata[\"originatingAddress\"];\n      console.log(\"workrequest Id recived from API ------>\", scope.EmailId);\n      scope.type = scope.Interactiondata[\"channel\"];\n      console.log(\"Channel Type ---> \", scope.type); //channel check //\n\n      if (scope.type == \"WEBCHAT\") {\n        console.log(\"webchat interaction is triggered\");\n        scope.crmurl + scope.EmailId;\n        console.log(\"MIDDLEWARE REQUEST URL --------> \", scope.crmurl);\n        var xhr1 = new XMLHttpRequest(); // Making our connection  \n\n        xhr1.open(\"GET\", scope.crmurl, true);\n        xhr1.send(); // function execute after request is successful \n\n        xhr1.onreadystatechange = function () {\n          if (this.readyState == 4 && this.status == 200) {\n            console.log(\"Response from middleware ----------->\", this.responseText);\n            setTimeout(window.open(this.responseText), 5000);\n          }\n        };\n      } else if (scope.type == \"VOICE\") {\n        console.log(\"voice interaction is triggred\");\n        scope.crmurl + scope.EmailId;\n        console.log(\"MIDDLEWARE REQUEST URL --------> \", scope.crmurl);\n        var xhr2 = new XMLHttpRequest(); // Making our connection  \n\n        xhr2.open(\"GET\", scope.crmurl, true);\n        xhr2.send(); // function execute after request is successful \n\n        xhr2.onreadystatechange = function () {\n          if (this.readyState == 4 && this.status == 200) {\n            console.log(\"Response from middleware ----------->\", this.responseText);\n            setTimeout(window.open(this.responseText), 5000);\n          }\n        };\n      } else {\n        console.log(\"email interaction recived\");\n        alert(\"crm feature not avaible for email contact support\");\n      } // Called automatically when the widget is destroyed\n\n\n      element.on('$destroy', function () {\n        api.unregister();\n      });\n    }\n\n    return {\n      scope: {},\n      replace: true,\n      template: template,\n      link: widgetContainer\n    };\n  }\n})(window, window.angular);\n//# sourceMappingURL=Crm-Screen-Pop.js.map\n"]}